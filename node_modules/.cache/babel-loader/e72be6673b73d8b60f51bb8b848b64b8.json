{"ast":null,"code":"var _jsxFileName = \"/Users/dkburd/Documents/projects/react/react-playground/src/composition/Tooltip.js\";\nimport React from 'react';\nimport './Tooltip.css'; // We'll need two sections inside the Tooltip, one for the text to display and the second for the message that appears on a hover. We'll use the children prop for the normal text and a prop called message for the text that will appear.\n// {props.children} - children...of what?\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tooltip(props) {\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"Tooltip\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"Tooltip-content\",\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Tooltip-message\",\n      children: props.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Tooltip;\nexport default Tooltip;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"sources":["/Users/dkburd/Documents/projects/react/react-playground/src/composition/Tooltip.js"],"names":["React","Tooltip","props","children","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP,C,CAEA;AAEA;;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,sBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAAA,4BACE;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA,gBACGA,KAAK,CAACC;AADT;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGD,KAAK,CAACE;AADT;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;KAXQH,O;AAaT,eAAeA,OAAf","sourcesContent":["import React from 'react';\nimport './Tooltip.css';\n\n// We'll need two sections inside the Tooltip, one for the text to display and the second for the message that appears on a hover. We'll use the children prop for the normal text and a prop called message for the text that will appear.\n\n// {props.children} - children...of what?\nfunction Tooltip(props) {\n  return (\n    <span className='Tooltip'>\n      <span className='Tooltip-content'>\n        {props.children}\n      </span>\n      <div className='Tooltip-message'>\n        {props.message}\n      </div>\n    </span>\n  )\n}\n\nexport default Tooltip;"]},"metadata":{},"sourceType":"module"}